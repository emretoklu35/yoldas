generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// add userId relation in here
model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  serviceType  String // "fuel", "battery", "tire"
  status       String // "pending", "completed", "cancelled"
  address      String
  deliveryTime String? // Geliş zamanı
  cardNumber   String? // Son 4 hane
  cardHolder   String? // Kart sahibi adı
  totalAmount  Float
  gasStationId String? // Seçilen istasyon ID'si
  gasStation   GasStation? @relation(fields: [gasStationId], references: [placeId])

  serviceProviderId Int?
  serviceProvider   User? @relation(name: "ServiceProviderOrder", fields: [serviceProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id               Int         @id @default(autoincrement())
  email            String      @unique
  password         String
  role             String      @default("user")
  gasStationId     String?
  gasStation       GasStation? @relation(fields: [gasStationId], references: [placeId])
  name             String?
  phone            String?
  gender           String?
  birthday         DateTime?
  services         Json? // Hizmet sağlayıcı için hizmet bilgileri
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?

  orders         Order[] // Kullanıcının siparişleri
  providedOrders Order[]   @relation(name: "ServiceProviderOrder") // servis provider orderlari
  vehicles       Vehicle[]
}

model GasStation {
  id        Int      @id @default(autoincrement())
  placeId   String   @unique @map("place_id")
  name      String
  latitude  Float
  longitude Float
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  orders Order[] // İstasyonun siparişleri
  user   User[]

  @@map("gas_stations")
}

model Vehicle {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  carName   String
  plate     String
  brand     String
  model     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}
